#!/usr/bin/env python
"""
Gossip: log files proccessing.
"""
import sys
import grp
import pwd
import daemon
import signal
import logging
import logging.handlers
import argparse

from gossip.config import Config
from gossip.worker import PidFile, do_work


if __name__ == '__main__':
    # parse command line arguments
    argparser = argparse.ArgumentParser(prog='gossip',
                                        description='Log files proccessing')
    argparser.add_argument('-d', '--daemonize', action='store_true',
                           help='daemonize')
    argparser.add_argument('-u', '--user', help='user name or id')
    argparser.add_argument('-g', '--group', help='group name or id')
    argparser.add_argument('-p', '--pid', help='pid file')
    argparser.add_argument('-l', '--log', help='log file')
    argparser.add_argument('config', help='config file')
    args = argparser.parse_args()

    # setup logger if log is defined
    if args.log is not None:
        logger = logging.getLogger()
        logger.setLevel(logging.INFO)
        formatter = logging.Formatter(
            "%(asctime)s [%(levelname)s] %(message)s")
        try:
            handler = logging.FileHandler(args.log)
        except IOError, e:
            print ("ERROR: can't save log file '%s': %s" % (args.log, e))
            sys.exit(1)
        handler.setFormatter(formatter)
        logger.addHandler(handler)
    else:
        logger = None
        handler = None

    # parse gossip config
    config = Config(args.config)

    if args.daemonize:
        # going crazy
        user_id = None
        group_id = None
        pidfile = None

        # get user id from user name. root by default
        if args.user is not None:
            try:
                user_id = pwd.getpwnam(args.user).pw_uid
            except KeyError:
                logger.error("User '%s' is not found." % args.user)
                sys.exit(1)

        # get group id from group name. root group (wheel?) by default
        if args.group is not None:
            try:
                group_id = grp.getgrnam(args.group).gr_gid
            except KeyError:
                logger.error("Group '%s' is not found." % args.group)
                sys.exit(1)

        # create lockfile if defined
        if args.pid is not None:
            pidfile = PidFile(args.pid)

        # create daemon context
        context = daemon.DaemonContext(
            working_directory='/',
            uid=user_id,
            gid=group_id,
            pidfile=pidfile
        )

        # do not close log file on daemonize
        if handler is not None:
            context.files_preserve = [handler.stream]

        # correct terminate on SIGHUP
        context.signal_map = {signal.SIGHUP: 'terminate'}

        # do work with daemonizing
        with context:
            do_work(config, args, logger, daemonize=True)
    else:
        # do work without daemonizing
        do_work(config, args, logger, daemonize=False)
